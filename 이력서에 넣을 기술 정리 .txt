-DB-

Oracle 11g 
	DDL - 데이터베이스의 테이블 조작 경험(create, alter, drop)
	DML - 테이블 내의 데이터 조작 경험 다수(CRUD)
	테이블 끼리 join해 데이터 조작 경험
	TCL - 데이터베이스의 트렌젝션 제어(commit)
MySql
	DDL -데이터베이스의 테이블 조작 경험(create, alter, drop)
	DML - 테이블 내의 데이터 조작 경험 다수(CRUD)

-Front-
javaScript  
	브라우저 화면에서 클라이언트의 요청에 따라 진행되는 과정에 필요한 동작을 함수로 구현 경험	
	버튼 클릭 시 데이터를 이동시키거나 값을 추가하는 부분에 사용한 경험 보유
	html의 element의 데이터를 사용하기 위해 가져와 저장하고 사용한 경험

Jquery
	원하는 데이터의 id나 class의 구분자를 사용해 데이터를 받아 사용
	Ajax를 통해 웹서버 요청 없이 데이터를 전송해 원하는 결과값을 도출하는 비동기 방식 구현 경험

CSS : 
	bootstrap을 이용해 html의 style 구성 경험	
	시멘틱 태그(header / section / footer)와 일반태그(a / div / table / span)를 사용해 웹 화면 구성 경험

-Back-
java
	직접 사용하려고 하는 대상이 객체이다
	사용하려는 기능을 클래스에 정의하고 그 클래스를 생성자를 통해 객체를 생성해 사용한 경험
	컨트롤러에서 VO객체를 생성해 원하는 파트에 사용한 경험?
	
	collection framework는 배열의 단점을 보완하고 다수의 객체를 다루기 위한 표준화된 프레임워크
	List를 사용해 이진탐색 구현 경험
	HashMap의 키값이 중복되지 않는다는 특징을 활용해 단어장 구현 경험
	
	swing을 import하고 JFrame을 상속받아 원하는 기능을 구현한 경험을 통해 라이브러리의 사용을 경험
	
	
	
	
	
	

python
	pandas 를 통해 데이터(csv파일, excel파일, dictionary, list)를 데이터프레임으로 변환하고 데이터 전처리 후 데이터 분석 경험
	정제된 데이터 시각화
	Flask 라이브러리를 활용해 스프링 프레임워크와 파이썬 간의 데이터 통신을 위해 서버를 구축해 사용한 경험
모델링 데이터 학습 sklearn
건하 - 회귀방식 적어라
기운이 - 셀리니움 적어라

스프링에 필터 넣을사람 넣어보자

Spring
	MVC2패턴(Model View Controller)을 활용해 프로젝트 개발 경험 
	클라이언트의 요청에 따라 컨트롤러에서 동작을 진행해 model을 통해 view에 데이터를 전송해 클라이언트 화면에 출력
	(각자 프로젝트의 경험을 적어주자)
	인터셉터를 통해 세션을 생성해 클라이언트가 접근할 수 있는 범위를 지정함
	loc,DI를 통해 객체를 직접 생성하지 않고 컨테이너에 생성되어 있는 bean을 가져와 사용(썜한테 물어보자)
	Maven을 통해 필요한 라이브러리를 다운로드해 관리 및 사용 경험
          
mybatis
	mybatis를 통해 데이터베이스에 생성된 테이블과 spring의 VO객체를 자동으로 매핑해 데이터 통신 경험
	mapper에 사용하려는 sql문을 정의해 sqlsessionfactory를 사용해 필요에 맞게 매개변수를 전달하고 결과값을 리턴받아 원하는 동작에 사용

Django 
	파이썬 프레임워크로 django를 사용해 웹 클라우드 구현 경험


let var const 차이 확인


1. 자바스크립트
JQuery
Ajax(비동기 통신)
응용파트 - Node.js	React

하위 - restfulAPI : 정리 필요 ( 하루정도 걸림 )
생활코딩(유튜브) - node.js 함 들어보는거 ㄱㅊ
당장 필요하진 않으나 기술스택을 늘리는 부분에서 사용할 수 있다



url method parameter

2. 자바
소켓통신


3. 스프링




react 와 Node.js를 해보는것도 좋음 (자바스크립트 프레임워크 기반)

-------------------DB--------------------------

Partl . Table
1. 테이블이란?
관계형 데이터베이스에서 데이터를 저장하기 위한 포맷이다.
속성과 속성값(튜플)으로 이루어져 있다

2. 테이블의 속성이란?
테이블에 데이터를 삽입할 때의 지정된 형식을 말한다
테이블을 생성할 때 지정한 속성으로 튜플을 생성한다.

3. 속성의 종류? 
varchar2, number, date, char 가 존재한다.

4. 제약조건의 정의?
속성을 설정할 때 삽입될 속성값에 규칙을 넣어 그 규칙내에서 튜플을 생성할 수 있도록 하는 것
-속성에 조건을 설정

5. 제약조건의 종류
primary key, foreign key, check, not null, unique 가 존재한다.

6. 기본키, 외래키
기본키 : 	기본키란 테이블 내에서 속성값이 중복되지 않고 하나만 존재해야한다(unique).
	또 속성값이 중복되지 않기에 select문을 진행할 시 자주 사용된다.
	-튜플을 유일하게 식별하는  식별자

외래키 : 	기본키를 제공하는 테이블을 부모 테이블이라 하고 외래키로 참조하는 테이블은 자식테이블이라 한다.
	외래키란 다른 테이블의 기본키를 참조하는 키로 다른 테이블에 속성값이 존재해야 사용할 수 있다.
	중복은 가능하고 부모 테이블의 속성값을 참조하기에 join에 많이 사용된다.
	-다른 테이블의 속성을 식별할 수 있는 키

7. ERD
각 테이블의 관계를 나타내는 다이어그램이다.
개체와 개체의 관계
-기본키나 외래키를 구분할 수 있다.

8. 정규화란?
기본키가 같은 여러 속성값이 존재할 때 제약조건이 위배되어 사용할 수 없을때 사용하는 방식으로 
테이블을 추가해 기본키를 외래키로 지정해 튜플을 추가할 수 있도록 하는 것이다.
테이블을 분리하는 행동 
-역정규화 - 테이블을 병합하는 행동
-tip 프로젝트를 진행해 외래키로 연결해 테이블을 분리한 경험
-숙박업소 예약 프로그램 때 호텔과 룸 이어진거 

9. 정규화를 하는 이유는?
관계형 DB가 가지는 무결성 중 개체 무결성에 위반되지 않도록 진행하기 위해서
-데이터의 중복을 최소화 하기 위해

10. DBMS란? ( DataBase Management System)
데이터베이스를 관리하는 시스템.
데이터베이스를 조작하는 별도의 소프트웨어로 
종류로는 Oracle , Mysql, mariaDB, mssql 이 있다
-데이터를 저장하고 관리하는 시스템(프로그램 자체)

Partz. Tuple
1. 튜플이란?
테이블에 저장하는 데이터의 단위
속성에 맞게 값을 저장해야 한다.
-테이블을 구성하는 각각의 행

2. 튜플 삽입명령어?
Insert into Table values(?,?...)

3. 튜플 삭제명렁어?
delete from Table ...

4. 튜플 갱신명령어?
update from Table set ...

5. 튜플 검색명령어?
select (검색할 속성명) from Table ...

6. select 구절을 구성요소를 작성하시오.
select문의 구성요소로는 검색할 속성, 검색을 진행할 테이블, 
-검색할 속성 / 대상 테이블 / 튜플에 대한 조건(튜플 선정) / 

7. where 절의 의미는?
select, delete, update 에서 사용하는데
원하는 조건을 설정해 그 조건 내에서 쿼리문을 실행하겠다 라는 의미이다.

8. group by의 의미는?
원하는 속성값을 묶어 그룹화한 데이터들의 값을 특정 조건으로 검색하겠다 라는 의미이다.
-튜플을 그룹화 해 그룹을 만들고 그룹별 검색이 가능

9. where과 having의 의미는?
where은 가장 먼저 진행되는 조건으로 원하는 조건 내에서 쿼리문을 실행하겠다 라는 의미.

having은 group by가 선행되어야만 쿼리문에서 사용이 가능하고 group by로 그룹화가 된 데이터를
한번 더 조건을 걸어 그 조건 내에서 데이터를 가져오겠다 라는 의미이다.
-그룹의 조건 -> 조건에 따라 그룹화 진행

Part3. Join
1. 조인이란
두개 이상의 테이블을 합쳐 필요한 데이터를 추출할 시 사용하는 방식이다

2. 조인의 종류
inner join / outer join(left outer join / right outer join)

3. 아우터 조인시 조인이 되지 않는 속성은 어떤 값으로 채워 지는가?
null값으로 채워진다.

Part4. 기타
1. DML 이란? 주요명령어는?
테이블내 속성값 조작시 사용되는 명령어
insert , delete , update , select
튜플 조작 CRUD
2. DCL 이란? 주요명렁어는?
데이터베이스에 접근하는 권한을 제어하는 명령어
commit , rollback
grant , revoke
grant , revoke 를 권한을 제어하는 이유

3. DDL 이란? 주요명령어는?
테이블을 정의할 때 사용되는 명령어
create , alter , drop

4. 인덱스란 무엇인가?
관계형데이터베이스에서 테이블에 대한 검색 속도를 높여주는 자료구조
테이블 내에 한개 또는 여러개의 속성을 이용하여 생성한다
-검색 성능을 높여주는 자료형
-PK로 사용 / DDL명령어 create를 사용해 생성

5. 사용해 본 데이터 베이스는?
-관계형 데이터베이스인 Oracle 11g / MySql

6. procedure
-절차형 프로그래밍 - 필요한 작업을 절차적으로 정의한 후 execute로 호출

7. trigger
특정 테이블에서 select를 제외한 DML문이 실행됬을 때 데이터베이스에서 자동으로
동작되도록 작성된 프로그램이다.
사용자가 호출하지 않고 자동적으로 호출되어 사용된다.
-테이블에 연산이 일어난 후 자동으로 일어나는 연산


--------------------자바----------------------

Part1. 변수 : 값을 저장하는 공간
int / float / double 할당 바이트 기억

1, 원시변수
할당된 데이터의 실제 값이 저장되는 변수
int a = 0;
실제 데이터가 있는 주소를 저장하는 변수

2. 참조변수
할당된 데이터의 참조(주소)값이 저장되는 변수
String a = "aa";

3. 배열
같은 타입의 변수들로 이루어진 집합
String[] a = new String[8];
고정 길이 / 연속적인 데이터를 연속적으로 기억공간에 할당
순서가 있는 자료형 

4. Integer vs int wrapper
int는 변수의 타입이다.
int a = 0;
Integer는 int의 wrapper class로 기본형을 객체로 다루기 위해 사용한다.
a = Integer.parseInt("00");

int의 wrapper class가 Integer이다
int는 null값을 가질 수 없지만 Integer는 null값을 가질 수 있다

Part2. 연산자

1. 연산자종류
대입연산자, 비교연산자, 논리연산자, 산술연산자

2. 연산자 우선순위
괄호 > 산술 > 비교 > 논리 > 대입 
if ( a == 30 && b > 20 ) ?

Part3. 명령문

1. 조건문
참과 거짓을 판단하는 문장으로 조건에 따라 진행되는 부분이 다르다.
if / else if / else문을 사용
if ( a > 20 ) {system.out.println(a) }
else if( a < 20 && a > 10) {system.out.println(a)}
else{ system.out.println(a) }

2. 반복문
코드가 중복되는 부분을 반복문을 사용해 코드의 반복을 줄여주는 역할을 한다.
for / while문을 사용
for ( int i = 0 ; i < 10 ; i++){ system.out.println(i); }
while(int i < 10){ i++ }

3. for문과 while문의 차이
for    : 구하고자 하는 값의 조건이 정확할 경우 사용
while : 조건식이 false가 될때까지 진행된다. 조건식이 필수

for : 횟수로 반복하는 반복문
while : 조건으로 반복하는 반복문


Part4. OOP 
1. 객체지향언어 특징 4가지
다형성 / 캡슐화 / 추상화 / 상속
다형성 : 같은 이름의 메서드가 매개변수, 리턴값에 따라 다른 동작이 되는 것
public String abc(int a){ return "a"; }
public int abc(String a){ return 0; }
 
캡슐화(은닉화) : 접근제어자를 통해 공개되지 않은 메서드에 구현 내용을 숨기는 것
public class abc{
	private int a;
	private String b;
	public void setA(int a){ this.a = a; }
	public int getA() { return a; }
}

추상화 : 각 클래스의 공통적인 부분을 뽑아 상위 클래스화 시키는 것 ( 반드시 상위가 아니라 하위도 가능)
public interface abc { public int abcde(int a); }
현실이나 사물을 클래스로 정의한 것

상속 : 부모클래스의 기능을 자식클래스가 사용할 수 있는 것
public class abcd implements abc{
	public int abcde(int a){ return a; } }
상속과 인터페이스 같은 경우 슈퍼클래스나 인터페이스 클래스로부터 하위클래스에 접근이 가능

2. 객체란 무엇인가?
정의되어 있는 클래스의 내부 속성 및 메서드를 사용할 수 있도록 호출하는 것
abcd abcd = new abcd();
int a = abcd.abcde(30);
데이터와 데이터를 처리하는 함수를 모아놓은 모듈

3. 객체를 초등학교 수준으로 설명하시오
붕어빵과 붕어빵 틀

4. 다형성이란 무엇인가?
다형성 : 같은 이름의 메서드가 객체에 따라 다르게 동작되는 것
메서드 오버라이딩 : 부모클래스로부터 상속받은 메서드를 자식클래스에서 재정의 하여 동작하는 것
메서드 오버로딩 : 같은 이름의 메서드가 매개변수, 리턴값에 따라 다른 동작이 되는 것

5. 상속과 인터페이스를 설명
상속 : 부모클래스에 있는 개념을 자식클래스로 확장하는 개념 / 다중 상속 불가
인터페이스 : 추상 클래스 / 바디가 정의되어 있는 일반 메서드 및 멤버변수를 가질 수 없음.
인터페이스 : 기능을 구체화시킨 것 / 자바에서는 여러개의 인터페이스를 구현받을 수 있다
6, 추상클래스가 무엇인가?
구현부가 없이 선언부만 있는 메서드를 가진 클래스.(미완성 메서드)
상속받은 자식클래스에서 오버라이딩을 통해 메서드 완성
하나 이상의 추상메서드가 존재할 경우 추상 클래스라고 한다.

7. 싱글톤
오직 하나의 객체만 생성하는 디자인 패턴


Part5. 자료구조
1. Collection
자료를 저장하는 여러가지 방법 ( List / Map / Set )
List<abcdVO> abc = new ArrayList<abcdVO>();
여러개의 객체를 담는 자료구조 ( List / Map / Set )

2. stack / FILO
자료구조의 한 데이터 저장 방식으로 선입후출의 방식을 가지고 있다.
stack area는 호출된 메서드를 저장한다 / 지역변수를 저장한다 / 
public class stack{
	List<String> stack = new ArrayList<String>();
	public void push(String a) {
		stack.add(a);
	}
	public String pop() {
		if ( stack.size() > 0) {
			String poppop = stack.get(stack.size()-1);
			stack.remove(stack.size() - 1);
			return poppop;
		}
		else{
			return null;
		}
	}
	public void main(){
		stack stack = new stack();
		stack.push("a");
		stack.push("b");
		stack.push("c");
		sysout(stack.pop());
		sysout(stack.pop());
		sysout(stack.pop());
		sysout(stack.pop());
	}
}
3. queue / FIFO
자료구조의 한 데이터 저장 방식으로 선입선출의 방식을 가지고 있다.
public class queue{
	List<String> queue = new ArrayList<String>();
	public void push(String a) {
		queue.add(a);
	}
	public String pop() {
		if ( queue.size() > 0) {
			String poppop = stack.get(0);
			queue.remove(0);
			return poppop;
		}
		else{
			return null;
		}
	}
	public void main(){
		queue queue = new queue();
		queue.push("a");
		queue.push("b");
		queue.push("c");
		sysout(queue.pop());
		sysout(queue.pop());
		sysout(queue.pop());
		sysout(queue.pop());
	}
}
Part6. 기타 중요한 이론

1. JVM(자바의 메모리 영역), 가비지컬렉터
JVM : 자바 프로그램 실행환경을 만들어주는 소프트웨어
가비지컬렉터 : 더이상 참조되거나 사용되지 않는 메모리를 자동으로 정리하는 것

JVM stack / heap / 


2. static, final
static : 객체 생성 없이 사용할 수 있는 필드 및 메서드를 생성할 때 사용 
static int a = 30;
public void abc(){
	sysout(a);
}

final : 해당 변수의 값이 저장되면 더이상 수정이 불가능하게 할 떄 사용
final int a = 30 ; 

3. 오버라이딩(Overriding)과 오버로딩(Overloading)
메서드 오버라이딩 : 부모클래스로부터 상속받은 메서드를 자식클래스에서 재정의 하여 동작하는 것
메서드 오버로딩 : 같은 이름의 메서드가 매개변수, 리턴값에 따라 다른 동작이 되는 것
오버라이딩 : 메서드를 재정의 하는 것 / 추상메서드는 반드시 재정의 해야한다

4. String, StringBuffer, StringBuilder의 차이)
String : 불변의 속성 /새로운 값을 가리키고 있는 메모리 영역을 가리키면 
기존의 값을 가리키고 있던 메모리 영역에서 새로운 메모리 영역으로 옮겨가 기존 메모리 영역이 가비지 컬렉터에 의해 제거된다
String a = "aa";
a = a + "ab";
값을 변경할 수 없다 (불변), 만약 값이 변경된다면 새로운 객체가 만들어지는 것이다.
이것은 성능이 저하될 경우가 있다. 자주 String이 바뀌는 상황은 좋지 않다.

StringBuffer : 새로운 값을 기존의 값에 추가하여 메모리 영역의 이동이 없다.
StringBuffer sb = new StringBuffer();
sb.append("aa");
sb.append("ab");

값을 변경할 수 있다.

StringBuilder : StringBuffer와 같은 기능을 하지만 동기화를 진행하지 않아 단일쓰레드에서 적합하다.
StringBuilder sb = new StringBuilder();
sb.append("aa");
sb.append("ab");

멀티 쓰레드 
Buffer는 동기화를 제공 Builder는 동기화를 제공하지 않음



5.접근제어자
사용자에게 특정 정보를 숨기기 위해 접근제어자를 통해 데이터 은닉
private / public / protect / default 
변수, 메서드, 클래스에 접근 권한을 제어한다

6. error, Exception차이
error : 개발자가 미리 예측하여 방지할 수 없는 오류로 JVM이 종료가 된다
Exception : 개발자가 미리 예측하여 예외처리를 두어 방지할 수 있는 오류로 
예외처리를 통해 JVM종료를 막을 수 있다.
error : 컴파일이 불가능한 상태 
Exception : 프로그램 동작중에 발생한 오류

---------------------------------------------------------------------------------------
DB
- DDL, DML, DCL
- select
- group by
- join - inner join, outer join
- procedure
- trigger
- index
- primary key, foreign key
- 서브쿼리

JavaScript
- DOM
- 이벤트 함수
- 변수
- jquery
- ajax 
- API 

Java
- Collection(List, Map, Set) Framework
- OOP 
- 접근제어자
- 변수(지역변수, 멤버변수), static, final
- JVM
- Garbage  Collection
- 메서드 활용
- 추상클래스, 추상메서드
- 인터페이스
- 상속
- 메서드 오버라이딩, 오버로딩
- API
- 예외처리
- Socket - tcp/ip

Spring
- DI
- IOC
- 컨테이너
- Mybatis
- Filter
- Interceptor
- Cookie & Session

Project - Spring 기반 프로젝트
- 요구사항 정리
- ERD 설계
- DataBase 구축 : Oracle 11g r2
- Server : 아파치톰캣 8.5 
- Spring 레거시 MVC
- Maven : 디펜던시 설정
- 게시글 쓰기, 수정, 삭제, 갱신 기능 구현
- 게시글 유효성 검사 기능 구현
- 인터셉터 & 세션을 활용한 게시글 권한 부여 구현
- PageVO 객체를 활용한 페이징 기능 구현
- Mybatis 퍼시스턴트 프레임워크를 활용한 mapper 활용, 동적쿼리 구현
- 이메일 인증 API 활용한 이메일 인증 기능 구현 (SMTP 프로토콜 사용)
- 다중회귀 알고리즘을 활용한 감정분석 구현
- 비동기방식구현 : 아이디중복체크, 좋아요 기능 구현
- REST API를 사용하여 게시판 구현
- Git을 활용하여 형상관리 (commti, push, pull)


- DDL , DML , DCL
- select
- group by
- join ( inner join , outer join )
- trigger
- index
- primary key , foreign key
- 서브쿼리

- DOM
- 이벤트 함수
- 변수
- Jquery
- Ajax
- API

- Collection(List, Map, Set) Framework
- OOP
- 접근제어자
- 변수(지역변수, 멤버변수), static, final
- JVM
- Garbage Collection
- 메서드 활용
- 추상클래스, 추상메서드
- 인터페이스
- 상속
- 메서드 오버라이딩, 오버로딩
- API
- 예외처리
- Socket ( tcp/ip )

-DI
-IOC
-컨테이너
-Mybatis
-Filter
-Intercepter
-Session
-------------------------자소서------------------

성장과정(에피소드 1개 만들기)
팀워크와 자기계발 사고방식을 잘 써봐야함
대학교 재학중에 3학년 과대표를 맡아서 1년동안 과대표 생활을 했던 적이 있습니다.

576 - 333 = 243

본인의 장단점 243자
단점을 쓸 때 어떤 부분으로 극복하려했는지도 기술하면 좋다
에피소드 넣으면 괜찮음
제 장점으로는 한번 시작한 것을 끝내려고 한다 입니다.
제대로 마무리 짓지 못한다면 계속 생각이 나 다른 일이 손에 잡히지 않는 것이 제 성격이어서
한번 시작한 것은 늦게 끝나더라도 마무리를 하고 끝내려고 하는 편입니다.
대학교 재학중에 진행한 팀 프로젝트 때 구현하려고 했던 기능을 제대로 구현하지 못했을 때
결국 계속 생각이 나 다시 학교에 돌아가 기능 구현을 마무리하고 돌아갔던 적이 있습니다.
제 단점은 잠이 많다는 것 입니다.


개발자가 되기위한 노력(제일 중요 항목) 333자
대학교 재학중 반년간 활동하는 프로젝트 반에 들어가 공부를 했던 적이 있습니다.
그 동안 아침 9시부터 저녁 6시까지 하는 수업을 진행하고 그 후에 부족한 공부를 진행했습니다.
처음으로 새벽까지 공부를 하고 어떤 날에는 아침까지 하고 집에서 씻고 다시 출석을 할 정도로 열심히 했습니다.
그렇게 공부를 하니 시작할 때에는 아무것도 몰랐던 제가 
반년 후에 진행한 마지막 팀 프로젝트를 잘 마무리 할 수 있었습니다.
그 후 23년도 1월부터 8월까지 학원에서 똑같이 9시부터 6시까지 수업을 진행하며 공부해
중간에 공백이 있어 많이 잊어버렸던 기술들을 다시 한번 갈고닦을 수 있었다고 생각했습니다.

강점 - 마무리는 깔끔하게
대학교 졸업작품 시 YOLO를 활용한 음식사진 칼로리 계산 프로젝트를 진행하였습니다. 
칼로리 계산 기능을 제대로 구현하지 못했을 때 계속 생각이 났고 갑자기 아이디어가 생각 나서 
다시 학교에 돌아가 기능 구현을 마무리하고 돌아가서 결국 마무리까지 하였습니다. 
할 수 있는 만큼의 노력을 최선을 다하는 마무리를 잘 하는 것이 저의 강점입니다. 
프로젝트가 시작되면 주변을 정리하고 프로젝트에 열중하는 
환경을 만들고 맡은 바 일을 잘하려고 노력합니다

대학교 졸업작품 시 ㅇㅇㅇ 프로젝트를 진행하였습니다. 
oo  기능을 제대로 구현하지 못했을 때 계속 생각이 났고 
갑자기 아이디어가 생각 나서 다시 학교에 돌아가 기능 구현을 마무리하고 
돌아가서 결국 마무리까지 하였습니다. 
할 수 있는 만큼의 노력을 최선을 다하는 마무리를 잘 하는 것이 저의 강점입니다. 
프로젝트가 시작되면 주변을 정리하고 프로젝트에 열중하는 환경을 만들고 
맡은 바 일을 잘하려고 노력합니다


개발자가 되기 위한 과정 - 오늘 하루를 열심히
대학교 00 학년 때 6개월 간 활동하는 ooo 프로젝트 팀에 지원하여 연구했던 경험이 있습니다.
반에 들어가 공부를 했던 적이 있습니다. 
아침 9시부터 저녁 6시까지 하는 수업 받고 그 후에는 부족한 공부를 진행했습니다.
새벽까지 공부를 하던 경험이 처음이였고 밤을 새고 집에서 씻고 바로 출석하는 등 
그 만큼 열심히 연구했었습니다. 
그 결과 시작할 때에는 아무것도 몰랐던 제가 프로젝트를 잘 마무리 할 수 있었습니다.
23년 휴먼교육센터에서 웹기반 프로젝트를 개발할 때도 팀원과 시간을 잘 계획하고 
기능을 구현하면서 어려운 기능을 연구하면서 해결해 나가는 과정을 반복하며 
오늘 하루 주어진 시간을 열심히 살다보면 열정이 생기고 결과도 보람차다는 것을 알게 되었습니다. 